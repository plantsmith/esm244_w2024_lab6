---
title: "NLS Student work up"
author: "Nathan Grimes, Casey O'Hara"
format: 
  html:
    code-fold: true
    embed-resources: true
execute: 
  echo: true
  message: false
  warning: false
editor: visual
---

## Introduction

[We're going to recreate a part of this paper using NLS](https://www.pnas.org/content/110/5/1779).

### Data

All data comes from the [RAM Legacy Database](https://www.re3data.org/repository/r3d100012095). If interested in fisheries familiarize yourself with RAM as it is the best source of data.

Load in the data.

```{r}
load(here::here("data","fish_data.Rdata"))

library(tidyverse)
library(Metrics)
library(cowplot)
library(here)
```

## Single model NLS

### Step 0: Planning our attack

1.  Understand Model

2.  Apply NLS to single fish stock

```         
a.   Model Selection

b.   Create R Function

c.  Define initial Guess

d.  Run NLS

e.  Evaluate Results
```

3.  Use purrr to map nls to all stocks

4.  Build a null model and use purrr for all stocks

5.  Compare Fox Model to Null Model

6.  Plot results

### Step One: Selecting a Model

What is Surplus?

$$
S_t=B_{t+1}-B_t+C_t
$$

Break down the following code chunk by adding comments at each line describing what is happening at each step and why need to do it.

```{r}
surplus<-Fish_data |> # create new data frame called surplus
  group_by(stockid) |> #group by the stock id 
  select(stockid,year,TBbest,TCbest) |>  #select only the stock id, year, tb best, tc best
  drop_na() |> # drop the NA bc NAs are problematic
  mutate(f_biomass=lead(TBbest)) |> #new column of f biomas from tbBest and move it up one index
  mutate(surplus=f_biomass-TBbest+TCbest) |> #create new surplus column using above eq
  drop_na() #drop the new NAs created
  
```

Examine data for one stock. Run the following code chunk.

```{r}
one_stock<-surplus |> 
  filter(stockid=="COD1f-XIV") #looking at one particular species surplus

ggplot(data=one_stock,aes(x=year,y=surplus))+
  geom_point(size=3,color="black")+
  theme_minimal()

```

How to best model Surplus? Use a Fox Model (that's what the paper used)

$$
\hat{S_t}=-e*MSY(\frac{B_t}{K})\ln(\frac{B_t}{K})
$$


Where e is base of the natural log $\approx$ 2.718, MSY is the maximum sustainable yield, K is the carrying capacity, and $B_t$ is the biomass for the observed year.

e = just a number 2.718
MSY - amount of fish we can harvest sustainably
k = carrying capacity (how much can ecosystem support)

### Step 2: Create function in R

Run this code chunk to create a function called `fox` that returns surplus in a given year based on current biomass.

```{r foxmodel}
fox<-function(m,carry,biomass){
 out= -2.718*m*(biomass/carry)*log(biomass/carry)
return(out)
}

```

Arrange the following out of order code to make a plot that adds an example Fox model onto our first graph.

```{r}
# labs(x="",y="Surplus Production")+
#   
# geom_line(aes(x=year,y=sim,color="Model"),linewidth=2)+
#   
# carry=150000
# 
# scale_color_manual(values=c("Data"="black","Model"="red"))+
#   
# mutate(sim=fox(m,carry,TBbest))
# 
# ggplot(data=fox_sim,aes(x=year,y=surplus,color="Data"))+
#   
# geom_point(size=3)+
# 
# fox_sim<-one_stock |>   
# 
# theme_minimal()

m=60000
```

```{r}

carry=150000
m=60000

fox_sim <-one_stock |> mutate(sim=fox(m,carry,TBbest)) 

ggplot(data=fox_sim,aes(x=year,y=surplus,color="Data")) + # data -> i will specify the color later....
  geom_point(size=3)+
  geom_line(aes(x=year,y=sim,color="Model"),linewidth=2) + # model -> i will specify the color later
  scale_color_manual(values=c("Data"="black","Model"="red")) + #legend is coming form scale color. manual
  labs(x="",y="Surplus Production")+
  theme_minimal()

```


### Step Three: Initial Guess

Write a vector for the initial parameter guess in the following code chunk.

How many parameters are we estimating? Look at the fox function for guidance.

Hints: Carrying Capacity is the most fish an environment can sustain. Maximum Sustainable Yield is 37% of carrying capacity in a Fox model (comes from analytical solution)

```{r guess}

k_guess <- max(one_stock$TBbest)
m_guess <- k_guess*.37

```

### Step Four: Run NLS

Fill in the nls function to make our first model work!

```{r nlsonemodel}
one_stock_nls = nls(formula = surplus~fox(m,carry,TBbest),
                  data = one_stock,
                  start = list(m = m_guess,carry = k_guess),
                  trace = TRUE)
```

### Step Five: Evaluate

Use the model to make predictions and plot the new predictions

```{r}

#What commands can we use here
one_stock_predict<-one_stock |> 
  mutate(predict = predict(one_stock_nls, newdata= TBbest))

# Code to plot
ggplot(data=one_stock_predict)+
  geom_point(aes(x=year,y=surplus))+
  geom_path(aes(x=year,y=predict),color='red')
```
This model is doing a better job of hitting the mean?

Calculate the RMSE of the prediction

```{r}
## Either make your own rmse function or use the Metrics::rmse function

Metrics::rmse(one_stock_predict$surplus,one_stock_predict$predict)


```
What is the predict column predicting? Surplus. Surplus column is actual value. Comparing what we thought we were going to get to what we got. 

Great our model works on a single model! Now we need to find a way to replicate the analysis.

## Using purrr to run many nls models

Write some pseudocode to define an approach to apply purrr to all fish stocks.

some point run nls
- define guesses
- we have our model already, that doesnt change
- find a way to give purrr nls
- find a way to give purrr data 

purrr::map(.x,.f=nls_fcn(.x))

### Set up wrappers (functions that we can put into Purrrrrr)

Run the following code chunk. Examine `fox_all` dataframe to help you build the nls function wrapper for purrr. What does nest() do and why is that useful to us?

```{r}
fox_all<-surplus |>
  group_by(stockid) |> 
  nest() #data in data -> store data in column 
```

Create a wrapper function to apply an nls model to our data. How do we provide guesses?

```{r nlsmany}

#Define a new function to pass along the nls calls

all_nls_fcn<-function(surplus_df){ # Where will the surplus_df come from?
  
  carry_guess = max(surplus_df$TBbest)
  m_guess = max(surplus_df$TBbest)*0.37
  
 nls(surplus~fox(m,carry,TBbest),
    data=surplus_df,
    start=list(m=m_guess, carry = carry_guess))# How are we going to define the guesses for each new species?
}

```

This code chunk runs a purrr mapping of build an nls, evaluating the nls, and getting our rmse scores in one step. However, it's broken. Run through each pipe to find the broken error. Fix the error and run the whole code chunk.

```{r}
#| eval: true

fox_all<-surplus |>
  group_by(stockid) |> 
  nest() |> 
  mutate(nls_model=map(data,~all_nls_fcn(.x))) |> 
  mutate(predictions=map2(nls_model,data,~predict(.x,newdata=.y))) |> 
  mutate(RMSE=map2_dbl(predictions,data,~Metrics::rmse(.x,.y$surplus))) 

#.x=data, .y = model 
```

## Compare to a random null model

Break down this code chunk. What does each line do? Run this code chunk once you add comments for each line.

```{r}

# Define the random null model as the rmse
r_avg<-function(surplus){
  avg_sur=mean(surplus)
  
  rmse=sqrt(mean((avg_sur-surplus)^2))
  
  return(rmse)
}

r_mse<-surplus |>
  group_by(stockid) |> 
  nest() |> 
  mutate(RMSE=map_dbl(data,~r_avg(.x$surplus)))
```

## How did the models compare to the null?

Look at the outputs and find a way to compare the RMSE for each model output. How did our fox model compare to the random null model?

```{r}
## Perform analysis in this code chunk.

r_mse$RMSE-fox_all$RMSE<0

sum(r_mse$RMSE-fox_all$RMSE<0) #one species better predicted by the avg model 

which(r_mse$RMSE-fox_all$RMSE<0) #it was number 39 (tells us which species)

fox_all$stockid[39] #[1] "WHITNS-VIId" tells us name of species 

```

In the paper, about 12% of the stocks were more explained by random shocks and 16% more so by abundance models. The rest were led by regime shifts that we did not model. Our results only found one stock out of 44 was better explained by random growth. Either our choice of nls models is far better than their mle method (not likely), or the subset I chose lends itself more to abundance models (this is really what happened). I did not want to overwhelm the analysis with over 200 stocks. Cod species in their paper typically were best explained by abundance models. Since our dataset focuses on cod, it's unsurprising that the Fox model best predicts cod surplus.

## Graph the top 5 best fit models

Purrr combined with cowplot creates a streamlined way to build multiple graphs. Let's take the 5 best fit Fox models and show how they performed compared to the data. I will walk through this code.

```{r}
plots<-fox_all |> 
  arrange(RMSE) |> 
  head(5) |> 
  mutate(graph=map2(data,predictions,
                    ~ggplot()+
                      geom_point(data = .x,aes(x=.x$year,y=.x$surplus,color='Actual'))+
                      geom_point(aes(x=.x$year,y=.y,color='Predicted'))+
                      theme_minimal()+xlab('')+ylab('Surplus')+
                      scale_color_manual(name="Legend",breaks = c('Actual','Predicted'),values=c('Actual'='black','Predicted'='red'))))

#Make a new list
plot_list=plots$graph

cowplot::plot_grid(plotlist=plot_list,labels =c( plots$stockid,""),hjust=-0.5,vjust=1)


```

### Extra Cowplot fun to make it look really clean

```{r legends}
#extract the legend

legend<-get_legend(plots$graph[[1]])

#remove the legend from the plots
# sometimes you don't always need to use purrr, a quick for loop for something easy can also work
for(i in 1:length(plots$graph)){
  plots$graph[[i]]<-plots$graph[[i]]+theme(legend.position = "none")
}

#Make a new list
plot_list_legend=plots$graph

#create a new plot in the empty space of cowplot grids and fill it with the legend info we took from the plots.

plot_list_legend[[6]]<-legend

cowplot::plot_grid(plotlist=plot_list_legend,labels =c( plots$stockid,""),hjust=-0.5,vjust=1)
```
